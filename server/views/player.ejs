<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>Document</title>
</head>
<body>

    <!-- CONNECT TO SOCKET -->
    <script src='/socket.io/socket.io.js'></script>
    <script>
        var socket = io.connect('http://localhost:3000', {
            query: document.cookie
        })
    </script>

    <h1>Welcome back <%= locals.currentUserEmail %></h1>

    <!-- YOUTUBE PLAYER -->
    <div id='player'></div>

    <!-- ROOM CONTROLS -->
    <% if (isOwner) {%>
        <div>
            <div>
                <form onsubmit='emitUrlChange(event)'>
                    <input id='videoUrlInput' type='text' placeholder='Video URL'>
                    <input id='submitVideoUrl' type='submit' value='Change Video'>
                </form>
            </div>

        </div>
    <% } %>    
    <!-- END ROOM CONTROLS -->

    <!-- CHAT -->
    <div>
        <form onsubmit='emitChat(event)'>
            <input id='chatInput' placeholder='chat message' type='text'>
            <input type='submit' value='submit'>
        </form>
    </div>

    <div>
        <ul id='chat'></ul>
    </div>
    <!-- END CHAT -->
</body>
<script>

    // join the current rooms socket connection



    var tag = document.createElement('script');
    tag.src = 'https://www.youtube.com/iframe_api';
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    var player;
    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '390',
            width: '640',
            videoId: 'usO_6-RuCrg',
            playerVars: {
                autoplay: 0,
                controls:1,
                disablekb:1,
                fs:0,
                modestBranding:1,
                volume:0,
            },
            events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
            }
        });
    }



    
    function onPlayerReady(event) {
        event.target.playVideo();
    }

    var done = false;

    let previousPlayerState = null;

    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PAUSED){
            emitPause()
        }
        else if (event.data == YT.PlayerState.PLAYING){
            emitResume()
        }
        else{}
    }

    function getIdFromVideoUrl(url){
        videoIdIndex = url.indexOf('?v=') + 3
        videoId = ''
        while(url.charAt(videoIdIndex) !== '&' && videoIdIndex < url.length){
            videoId += url.charAt(videoIdIndex)
            videoIdIndex++
        }
        return videoId
    }

    function appendMessageToChat(msg){
        const message = document.createElement('li')
        message.appendChild(document.createTextNode(msg))
        document.getElementById('chat').appendChild(message)
    }

    // SOCKET EMITTERS

    // send a timestamp synchronization signal
    setInterval(() => {
        console.log("emitting sync")
        socket.emit('sync', player.getCurrentTime())
    }, 2000)

    function emitChat(event){
        console.log('called')
        event.preventDefault();
        const input = document.getElementById('chatInput');
        const message = input.value;
        if (message != ''){
            socket.emit('chat message', message);
            //append message to users own chat instantly
            appendMessageToChat(`<%= locals.currentUserEmail %>: ${message}`)
        }
        input.value = '';
        return false;
    }

    function emitUrlChange(event){
        event.preventDefault()
        const input = document.getElementById('videoUrlInput')
        const videoId = getIdFromVideoUrl(input.value)
        input.value = ''
        socket.emit('url change', videoId)
    }

    function emitPause(){
        console.log('Emitting pause command')
        socket.emit('pause', 'true')
    }

    function emitResume(){
        console.log('Emitting resume command')
        socket.emit('resume', 'true')
    }

    // SOCKET RECEIVERS

    //receive and reset to sync signal
    socket.on('sync', (hostTime)=>{
        console.log('sync signal received')
        const timeDiff = Math.abs(player.getCurrentTime() - hostTime)
        console.log("TimeDiff: ", timeDiff)
        if (timeDiff >= 0.5 && player.getPlayerState() != YT.PlayerState.PAUSED){
            player.seekTo(hostTime, true)
        }
    })

    socket.on('chat message', (msg) => {
        console.log('received chat message')
        appendMessageToChat(msg)
    })

    socket.on('pause', (msg) => {
        console.log('received pause command')
        player.pauseVideo()
    })

    socket.on('resume', (msg) => {
        console.log('received resume command')
        player.playVideo()
    })

    socket.on('url change', (msg)=>{
        console.log('received url change command: ' + msg)
        player.cueVideoById(msg)
        player.playVideo()
    })

    socket.on('room closed', ()=>{
        console.log('stream room closed')
        window.location.replace('http://localhost:3000/rooms');
    })

    socket.on('room connect error', ()=>{
        console.log('room connect error')
        window.location.replace('http://localhost:3000/rooms');
    })

</script>
</html>