<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title><%= locals.currentUserEmail%>'s Stream</title>
    <link rel="stylesheet" href="../css/styles.css">
</head>
<body>
    <nav class="navbar has-background-secondary" role="navigation" aria-label="main navigation">
        <div class="navbar-brand">
            <a href="../" class="navbar-item">
                Sync-Stream
            </a>
        </div>
        <div class="navbar-menu">
            <div class="navbar-start">
                <div class="navbar-item">
                    <a href="../">
                        Rooms
                    </a>
                </div>
            </div>
        </div>
    </nav>
    <!-- CONNECT TO SOCKET -->
    <script src='/socket.io/socket.io.js'></script>

    <!-- SEND CREDS TO SOCKET -->
    <script>
        var socket = io.connect(location.origin.replace(/^http/, 'ws'), {
            query: document.cookie
        })
    </script>


    <!-- YOUTUBE PLAYER -->

    <div class="columns is-gapless">
        <div class="column is-one-fifth controls">
            <!-- ROOM CONTROLS -->
            <% if (isOwner) {%>
                <form onsubmit='emitUrlChange(event)'>
                    <input id='videoUrlInput' type='text' placeholder='Load new video from url' class="input is-secondary">
                    <input id='submitVideoUrl' type='submit' value='+' class="input is-primary">
                </form>
            <% } %>    
            <div class="announcement-messages">
                <ul id='announcements' ></ul>
            </div>
            <% if (isOwner) {%>
            <div class='announcement-form'>
                <form onsubmit='emitAnnouncement(event)'>
                    <input id='announcementInput' placeholder='announcement message' type='text' class="input is-secondary" autocomplete="off">
                </form>
            </div>
            <% } %>    

            <!-- END ROOM CONTROLS -->
        </div>
        <div class="column">
            <h1 class='stream-title'><%= locals.currentUserEmail %>'s Stream</h1>

            <div class="player-container">
                <div id='player' class='player'></div>
            </div>
        </div>
        <div class="column is-one-fifth chat">
            <!-- CHAT -->
            <div class="chat-messages">
                <ul id='chat' ></ul>
            </div>
            <div class='chat-form'>
                <form onsubmit='emitChat(event)'>
                    <input id='chatInput' placeholder='chat message' type='text' class="input is-secondary" autocomplete="off">
                </form>
            </div>
            <!-- END CHAT -->

    </div>
</div>
</body>

<!-- LOAD PLAYER API VERSION -->
<script src=<%= locals.isOwner ? "../js/hostPlayer.js" : "../js/viewerPlayer.js" %>></script>


<!-- <script src="../js/player.js"></script> -->
<script>
    function onPlayerReady(event) {
        event.target.playVideo();
    }

    var done = false;

    let previousPlayerState = null;

    function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PAUSED){
            emitPause()
        }
        else if (event.data == YT.PlayerState.PLAYING){
            emitResume()
        }
        else{}
    }

    function getIdFromVideoUrl(url){
        videoIdIndex = url.indexOf('?v=') + 3
        videoId = ''
        while(url.charAt(videoIdIndex) !== '&' && videoIdIndex < url.length){
            videoId += url.charAt(videoIdIndex)
            videoIdIndex++
        }
        return videoId
    }

    function appendMessageToChat(msg, clear){
        const message = document.createElement('li')
        const chat = document.getElementById('chat')
        message.appendChild(document.createTextNode(msg))
        chat.prepend(message)
        if (clear){
            document.getElementById('chatInput').value = ''
        }
    }

    function appendMessageToAnnouncements(msg, clear){
        const message = document.createElement('li')
        const announcements = document.getElementById('announcements')
        message.appendChild(document.createTextNode(msg))
        announcements.prepend(message)
        document.getElementById('announcementInput').value = ''
    }

    // SOCKET EMITTERS

    // send a timestamp synchronization signal
    setInterval(() => {
        console.log("emitting sync")
        socket.emit('sync', player.getCurrentTime())
    }, 2000)

    function emitChat(event){
        console.log('called')
        event.preventDefault();
        const input = document.getElementById('chatInput');
        const message = input.value;
        if (message != ''){
            socket.emit('chat message', `<%= locals.currentUserEmail %>: ${message}`);
            //append message to users own chat instantly
            appendMessageToChat(`<%= locals.currentUserEmail %>: ${message}`, true)
        }
        input.value = '';
        return false;
    }

    function emitUrlChange(event){
        event.preventDefault()
        const input = document.getElementById('videoUrlInput')
        const videoId = getIdFromVideoUrl(input.value)
        input.value = ''
        socket.emit('url change', videoId)
    }

    function emitPause(){
        console.log('Emitting pause command')
        socket.emit('pause', 'true')
    }

    function emitResume(){
        console.log('Emitting resume command')
        socket.emit('resume', 'true')
    }

    // SOCKET RECEIVERS

    //receive and reset to sync signal
    socket.on('sync', (hostTime)=>{
        console.log('sync signal received')
        const timeDiff = Math.abs(player.getCurrentTime() - hostTime)
        console.log("TimeDiff: ", timeDiff)
        if (timeDiff >= 0.5 && player.getPlayerState() != YT.PlayerState.PAUSED){
            player.seekTo(hostTime, true)
        }
    })

    socket.on('chat message', (msg) => {
        console.log('received chat message')
        appendMessageToChat(msg, false)
    })

    socket.on('pause', (msg) => {
        console.log('received pause command')
        player.pauseVideo()
    })

    socket.on('resume', (msg) => {
        console.log('received resume command')
        player.playVideo()
    })

    socket.on('url change', (msg)=>{
        console.log('received url change command: ' + msg)
        player.cueVideoById(msg)
        player.playVideo()
    })

    socket.on('room closed', ()=>{
        console.log('stream room closed')
        window.location.replace(location.origin);
    })

    socket.on('room connect error', ()=>{
        console.log('room connect error')
        window.location.replace(location.origin);
    })
</script>
</html>